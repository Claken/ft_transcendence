version: "3.9"

volumes:
  frontend-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: $PWD/frontend/src
  backend-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: $PWD/backend/src
  postgres-data:
    # driver: local
    # driver_opts:
    #   type: none
    #   o: bind
    #   device:
  pgadmin-data:
    # driver: local
    # driver_opts:
    #   type: none
    #   o: bind
    #   device:

services:
  frontend:
    build: frontend/.
    image: frontend
    ports:
      - 3000:3000
    depends_on:
      - backend
    networks:
      - pong_network
    container_name: frontend
    volumes:
      - frontend-data:/usr/src/app/src:rw

  backend:
    build: backend/.
    image: backend
    ports:
      - 3001:3001
    # depends_on:
    # - postgres
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - pong_network
    container_name: backend
    volumes:
      - backend-data:/usr/src/app/src:rw

  postgres:
    image: postgres:14.4
    restart: always
    command: postgres -p 5432
    environment:
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PGDATA: /var/lib/postgresql/data
    env_file:
      - ./.env
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - pong_network
    container_name: postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5

  pgadmin:
    image: dpage/pgadmin4:6.17
    restart: always
    env_file:
      - ./.env
    ports:
      - 5000:5000
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    links:
      - "postgres:postgres-server"
    depends_on:
      - postgres
    networks:
      - pong_network
    container_name: pgadmin

networks:
  pong_network:
    driver: bridge
